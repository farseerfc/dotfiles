#!/bin/bash

function get_kernels(){
    cd /boot || exit
    echo vmlinuz-* | tr " " "\n" | sed "s/vmlinuz-//"
}

function get_initramfs(){
    kernel="$1"
    cd /boot || exit
    [[ -f "initramfs-$kernel.img" ]] && echo "$kernel"
    [[ -f "initramfs-$kernel-fallback.img" ]] && echo "$kernel-fallback"
}

function get_title(){
    kernel="$1"
    initramfs="$2"
    eval "$(grep "^NAME=" /etc/os-release)"
    echo "$NAME ($initramfs)"
}

function get_id(){
    kernel="$1"
    eval "$(grep "^ID=" /etc/os-release)"
    echo "$ID"
}

function get_version(){
    kernel="$1"
    file "/boot/vmlinuz-$kernel" | grep -o "version \S*" | sed "s/version //"
}

function get_options(){
    options="$(sed 's/initrd=\S* //g' /proc/cmdline)"
    [[ -f /etc/kernel/cmdline ]] && options="$(tr '\n' ' ' </etc/kernel/cmdline)"
    echo "$options"
}

function write_conf(){
    kernel="$1"
    initramfs="$2"
    echo -e "title\t$(get_title "$kernel" "$initramfs")"
    echo -e "version\t$(get_version "$kernel")"
    echo -e "options\t$(get_options "$kernel")"
    echo -e "linux\t/vmlinuz-$kernel"
    echo -e "initrd\t/initramfs-$initramfs.img"
}

mapfile -t kernels < <(get_kernels)

for kernel in "${kernels[@]}"; do
    mapfile -t initramfs < <(get_initramfs "$kernel")
    for initramfs in "${initramfs[@]}"; do
        filename="$(get_id "$kernel")-$initramfs.conf"
        echo -e "\e[1;4;31m$filename\e[m"
        write_conf "$kernel" "$initramfs" | tee "/boot/loader/entries/$filename"
    done
done
